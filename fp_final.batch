#####
# Set input and output directories 
set.dir(output = mothur_output/fp_final)

# Make contigs from .fastq files
make.contigs(file=fp_final.files, processors=8)

# Screen for contigs with greater than 275 base pairs or ambiguous bases
screen.seqs(fasta=current, group=current, maxambig=0, maxlength=275)

# Remove duplicate sequences
unique.seqs()

# Generate count file
count.seqs(name=current, group=current)

# Align sequences using the reference alignment 
align.seqs(fasta=current, reference=reference_alignment.align)

# Screen for sequences in the specified V4 region and 
screen.seqs(fasta=current, count=current, start=1968, end=11550, maxhomop=8)

# Filter out overhangs and columns that are only gap characters
filter.seqs(fasta=current, vertical=T, trump=.)

# Remove duplicate sequences from count_table and names file
unique.seqs(fasta=current, count=current)
unique.seqs(fasta = current, name = current)

# Combine sequences within 2 nt per 100 bp of each other
pre.cluster(fasta=current, count=current, diffs=2)

# Detect chimeras (sequences composed from the joining of unrelated sequences)
chimera.vsearch(fasta=current, count=current, dereplicate=t)

# Remove the chimeras detected in the previous step
remove.seqs(fasta=current, accnos=current)

# Classify sequences according to the trainset
classify.seqs(fasta=current, count=current, reference=trainset16_022016.rdp.fasta, taxonomy=trainset16_022016.rdp.tax, cutoff=80)

# Remove non-bacterial taxa
remove.lineage(fasta=current, count=current, taxonomy=current, taxon=Chloroplast-Mitochondria-unknown-Archaea-Eukaryota)

# Generate "quick and dirty" clustering and taxonomy including mocks and controls
rename.file(fasta = current, new = fp_final.base.fasta)
rename.file(taxonomy = current, new = fp_final.base.taxonomy)
rename.file(count = current, new = fp_final.base.count_table)
cluster.split(fasta= current, count=current, taxonomy=current, splitmethod=classify, taxlevel=4, cutoff=0.03)
classify.otu(list = current, count = current, taxonomy = current, label = 0.03)
rename.file(constaxonomy = current, new = fp_final.cons.base.taxonomy)
make.shared(list=current, count= current)
rename.file(shared = current, new = fp_final.base.shared)


# Remove control samples and mock community
remove.groups(count= mothur_output/fp_final/fp_final.base.count_table, fasta = mothur_output/fp_final/fp_final.base.fasta, taxonomy = mothur_output/fp_final/fp_final.base.taxonomy, accnos = fp_final.accnosgroups)

# Cluster samples only
dist.seqs(fasta = current, cutoff = .03)
cluster(column=current,count=current)

# Generate .shared file (instances of each OTU per group) 
make.shared(list=current, count= current)

# Generate consensus taxonomy for OTUs 
classify.otu(list = current, count = current, taxonomy = current, label = 0.03)

#Rename basic output files
rename.file(taxonomy = current, new = fp_final.final.taxonomy)
rename.file(constaxonomy = current, new = fp_final.final.cons.taxonomy)
rename.file(column = current, new = fp_final.final.dist)
rename.file(shared = current, new = fp_final.final.shared)
rename.file(count = current, new = fp_final.final.count_table)

#Get OTU relative abundances
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.OTU.relabund)

# Get alpha diversity measures
summary.single(shared = current,calc=nseqs-sobs-chao-shannoneven-npshannon-invsimpson-coverage, subsample=T)
rename.file(input = mothur_output/fp_final/fp_final.final.groups.summary, new = fp_final.alpha_diversity.summary)

# Get beta diversity measures
summary.shared(calc= braycurtis-morisitahorn, subsample=T)

# Generate clustering-based community types
get.communitytype(shared=current, minpartitions = 1)

# Genus-level data
phylotype(taxonomy = current)
make.shared(list = current, count= current, label= 1)
classify.otu(list=current, count=current, taxonomy=current, label = 2)
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.genus.relabund)
rename.file(constaxonomy = current, new = fp_final.genus.cons.taxonomy)
rename.file(shared = current, new = fp_final.genus.shared)

# Family-level data
phylotype(taxonomy = current)
make.shared(list = current, count= current, label= 2)
classify.otu(list=current, count=current, taxonomy=current, label = 3)
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.family.relabund)
rename.file(constaxonomy = current, new = fp_final.family.cons.taxonomy)
rename.file(shared = current, new = fp_final.family.shared)

# Order-level data
phylotype(taxonomy = current)
make.shared(list = current, count= current, label= 3)
classify.otu(list=current, count=current, taxonomy=current, label = 4)
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.order.relabund)
rename.file(constaxonomy = current, new = fp_final.order.cons.taxonomy)
rename.file(shared = current, new = fp_final.order.shared)

# Class-level data
phylotype(taxonomy = current)
make.shared(list = current, count= current, label= 4)
classify.otu(list=current, count=current, taxonomy=current, label = 5)
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.class.relabund)
rename.file(constaxonomy = current, new = fp_final.class.cons.taxonomy)
rename.file(shared = current, new = fp_final.class.shared)

# Phylum-level data
phylotype(taxonomy = current)
make.shared(list = current, count= current, label= 5)
classify.otu(list=current, count=current, taxonomy=current, label = 6)
get.relabund(shared=current)
rename.file(relabund = current, new = fp_final.phylum.relabund)
rename.file(constaxonomy = current, new = fp_final.phylum.cons.taxonomy)
rename.file(shared = current, new = fp_final.phylum.shared)


